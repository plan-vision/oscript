/*=============================================================================
 *     Copyright Texas Instruments 2000.  All Rights Reserved.
 *   
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * $ProjectHeader: OSCRIPT 0.155 Fri, 20 Dec 2002 18:34:22 -0800 rclark $
 */


package oscript.compiler;


import oscript.classwrap.WrappedClass;
import oscript.classwrap.WrappedInterface;
import oscript.data.*;

/**
 * The <code>classwrap</code> package is used to generate a "wrapper" for
 * a java class.  A wrapper is just a subclass of a given java class, where
 * for each public non-final, non-static method, a wrapper method and an
 * "orig" method are generated.  The wrapper method looks up a property
 * with the same name in the script object, and if it exists, and is a
 * function that takes a compatible number of arguments, calls it,
 * otherwise it calls the same method in the parent (original) java class.
 * The orig method simply calls the same method in the parent class.
 * <p>
 * The "wrapper" class is used any place where a script objects extends
 * a java class (ie. java class, java interface, or builtin-type).  The
 * purpose is to allow the script object to override methods in a java
 * class, or implement methods in a java interface.
 * <p>
 * The "wrapper" class is generated using the Byte Code Engineering Library
 * (BCEL.jar).
 * 
 * @author Rob Clark (rob@ti.com)
 * <!--$Format: " * @version $Revision$"$-->
 * @version 1.34
 */
public class ClassWrapGen
{
  private static java.util.Hashtable wrapperClassTable = new java.util.Hashtable();

  
  /*=======================================================================*/
  /**
   * Because the wrapper method looks to the script object first, before
   * calling the wrapped method, there are times when we want to call the
   * original method directly.  To do this, you call the "orig" method.
   * To hide the naming convention, other code should use this method
   * to get the name of the "orig" method for the named method.
   * 
   * @param javaObj      the java object
   * @param methodName   the name of the method in the parent class
   * @return the mangled name of the method that calls the requested
   * method in the parent class, ie. the "orig" method.
   */
  public static String getOrigMethodName( Object javaObj, String methodName )
  {
    // the java class may have been final, in which case javaObj is just
    // a plain 'ol object:
    if( (javaObj == null/*XXX*/) || (javaObj instanceof WrappedClass) )
      return "__orig_" + methodName;
    else
      return methodName;
  }
  public static String getOrigMethodName( String methodName )
  {
    return getOrigMethodName( null, methodName );
  }
  
  /*=======================================================================*/
  /**
   * Is the specified object an instance of a wrapper class?
   * 
   * @param javaObj      the java object to test
   * @return <code>true</code> if instance of auto-generated wrapper class
   */
  public static boolean isWrapperInstance( Object javaObj )
  {
    return (javaObj instanceof WrappedClass) || (javaObj instanceof WrappedInterface);
  }
  
  /*=======================================================================*/
  /**
   * Link the specified java object and script object.  The java object
   * should be an instance of a wrapper class generated by the 
   * <code>makeWrapperClass</code> method.
   * 
   * @param javaObj      the java object
   * @param scriptObj    the script object
   */
  public static void linkObjects( Object javaObj, Scope scriptObj )
  {
    ((Scope)scriptObj).__setJavaObject(javaObj);
    
    // the java class may have been final, in which case javaObj is just
    // a plain 'ol object:
    if( javaObj instanceof WrappedClass )
      ((WrappedClass)javaObj).__setScriptObject(scriptObj);
    else if( javaObj instanceof WrappedInterface )
      ((WrappedInterface)javaObj).__setScriptObject(scriptObj);
  }
  
  /*=======================================================================*/
  /**
   * Given a java object, which may be linked to a script object, return
   * the linked script object.
   * 
   * @param javaObj      the java object
   * @return the script object, or <code>null</code>
   */
  public static Value getScriptObject( Object javaObj )
  {
    // the java class may have been final, in which case javaObj is just
    // a plain 'ol object:
    if( javaObj instanceof WrappedClass )
      return ((WrappedClass)javaObj).__getScriptObject();
    else if( javaObj instanceof WrappedInterface )
      return ((WrappedInterface)javaObj).__getScriptObject();
    
    return null;
  }
  
  /*=======================================================================*/
  /**
   * Given a java class that may or may not be a wrapper class, return a
   * java class that is the closest super-class that is not a wrapper
   * class.
   * 
   * @param javaClass    a java class that might be a wrapper class
   * @return a java class that is not a wrapper class
   */
  public static final Class getNonWrapperClass( Class javaClass )
  {
    Class tmp;
    
    if( ((tmp = javaClass.getSuperclass()) != null) &&
        ((tmp = (Class)(wrapperClassTable.get(tmp))) != null) &&
        (tmp == javaClass) )
    {
      return javaClass.getSuperclass();
    }
    else
    {
      return javaClass;
    }
  }
  

 
}




/*
 *   Local Variables:
 *   tab-width: 2
 *   indent-tabs-mode: nil
 *   mode: java
 *   c-indentation-style: java
 *   c-basic-offset: 2
 *   eval: (c-set-offset 'substatement-open '0)
 *   eval: (c-set-offset 'case-label '+)
 *   eval: (c-set-offset 'inclass '+)
 *   eval: (c-set-offset 'inline-open '0)
 *   End:
 */

