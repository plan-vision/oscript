/* Generated By:JavaCC: Do not edit this line. OscriptParserTokenManager.java */
package oscript.parser;

public class OscriptParserTokenManager implements OscriptParserConstants
{
   static private boolean stillInFormalComment;
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x20000000008000L) != 0L)
            return 10;
         if ((active0 & 0x140L) != 0L || (active1 & 0x200400000000L) != 0L)
            return 2;
         if ((active1 & 0x100L) != 0L)
            return 8;
         if ((active0 & 0x3ffffffdf80000L) != 0L)
         {
            jjmatchedKind = 67;
            return 40;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x3ffffdfcf80000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active0 & 0x201000000L) != 0L)
            return 40;
         if ((active1 & 0x200000000000L) != 0L)
            return 60;
         return -1;
      case 2:
         if ((active0 & 0x35ffdd7cf80000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0xa002080000000L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0x24bf9d68f80000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 40;
         }
         if ((active0 & 0x11404014000000L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0x42f8d48900000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
            return 40;
         }
         if ((active0 & 0x20901020680000L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x4218548800000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
            return 40;
         }
         if ((active0 & 0xe0800100000L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0x4210500800000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0x8048000000L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x100800000L) != 0L)
            return 40;
         if ((active0 & 0x4210400000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
            return 40;
         }
         return -1;
      case 8:
         if ((active0 & 0x200400000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active0 & 0x4010000000000L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 37:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L);
      case 38:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400010000000L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 40:
         return jjStopAtPos(0, 70);
      case 41:
         return jjStopAtPos(0, 71);
      case 42:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 43:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40020000000L);
      case 44:
         return jjStopAtPos(0, 78);
      case 45:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80040000000L);
      case 46:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x20000000000000L);
      case 47:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x200000000000L);
      case 58:
         return jjStopAtPos(0, 86);
      case 59:
         return jjStopAtPos(0, 77);
      case 60:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4008001000000L);
      case 61:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18030002000000L);
      case 63:
         return jjStopAtPos(0, 85);
      case 91:
         return jjStopAtPos(0, 75);
      case 93:
         return jjStopAtPos(0, 76);
      case 94:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe00000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 73);
      case 124:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800008000000L);
      case 125:
         return jjStopAtPos(0, 74);
      case 126:
         return jjStopAtPos(0, 84);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 38:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 43:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 45:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 46:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L);
      case 61:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 109, 60);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      case 62:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18020000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000020300000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c00000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000400000000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000080c00000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x3018000080000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x124100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 123:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 124:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 25);
         break;
      case 61:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 114);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         break;
      case 62:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x30408000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4020100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200140c00000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100800000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 40);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40008200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 40);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 116);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40080000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200100200000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 40);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 40);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x4100008000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 40);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000100000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800800000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x20400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x90400800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 40);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000100000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000800000L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 40);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x40800000000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000100000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x400800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 40);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200100000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 40);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x4010400000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 40);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 40);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 45, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((0xffff7ffeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjstateSet[jjnewStateCnt++] = 37;
                  }
                  break;
               case 2:
                  if ((0xffff7bfeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  else if (curChar == 39)
                     jjCheckNAdd(8);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAddStates(15, 17);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddTwoStates(8, 6);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(18, 20);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 25:
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 32:
                  if ((0xffff7bfeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 33:
                  if ((0xffff7ffeffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 35:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 36:
                  if (curChar != 47)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(25, 27);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(47, 14);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(51, 14);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 14);
                  break;
               case 56:
                  if (curChar != 48)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddStates(15, 17);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddTwoStates(58, 6);
                  break;
               case 59:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddTwoStates(59, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjCheckNAdd(35);
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjCheckNAdd(35);
                  break;
               case 3:
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(40);
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 14:
                  if ((0x5000000050L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(33, 37);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 24:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 27:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 34:
                  if (curChar == 92)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  jjCheckNAddStates(0, 2);
                  break;
               case 37:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if (curChar == 92)
                     jjCheckNAdd(35);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 57:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddTwoStates(58, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
               case 33:
               case 35:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
               case 40:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(40);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(12, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      curChar = ASCII_UCodeESC_CharStream.readChar();
      if (curChar == -1) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x10000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_5(long active0)
{
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa1_3(0x2000L);
      default :
         return jjMoveNfa_3(4, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_3(long active0)
{
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
static private final int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
static private final int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
static private final int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
static private final int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0);
   curChar = ASCII_UCodeESC_CharStream.readChar();
   if (curChar == -1) {
      jjStopStringLiteralDfa_3(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0);
}
static private final int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 109)
                     kind = 12;
                  break;
               case 1:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 115)
                     kind = 12;
                  break;
               case 6:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      curChar = ASCII_UCodeESC_CharStream.readChar();
      if (curChar == -1) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      curChar = ASCII_UCodeESC_CharStream.readChar();
      if (curChar == -1) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
static private final int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 17)
                     kind = 17;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      curChar = ASCII_UCodeESC_CharStream.readChar();
      if (curChar == -1) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(1, 0);
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 47)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 64)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      curChar = ASCII_UCodeESC_CharStream.readChar();
      if (curChar == -1) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
static private final int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 32)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      curChar = ASCII_UCodeESC_CharStream.readChar();
      if (curChar == -1) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 34, 36, 42, 43, 48, 49, 52, 53, 14, 32, 38, 16, 17, 19, 57, 
   59, 6, 10, 11, 14, 16, 17, 21, 19, 44, 45, 14, 52, 53, 14, 12, 
   13, 18, 20, 22, 24, 27, 46, 47, 50, 51, 54, 55, 1, 2, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\142\162\145\141\153", 
"\143\141\154\154\145\145", "\143\141\164\143\150", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\157", "\56\56\56", "\145\154\163\145", "\145\170\164\145\156\144\163", 
"\145\166\141\154", "\146\141\154\163\145", "\146\151\156\141\154\154\171", "\146\157\162", 
"\146\165\156\143\164\151\157\156", "\151\146", "\151\156\163\164\141\156\143\145\157\146", 
"\151\155\160\157\162\164", "\155\151\170\151\156", "\156\145\167", "\156\165\154\154", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\162\165\145", 
"\164\162\171", "\165\156\144\145\146\151\156\145\144", "\166\141\162", "\166\157\151\144", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\47\173", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\56\56", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "MAYBE_JAVADOC_TAG", 
   "EXPECTING_JAVADOC_TAG_ARG", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_UNIX_SELF_EXECUTABLE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 5, 6, 0, 3, 4, 2, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xa87ffffffffa0001L, 0x3fffffffffffc8L, 
};
static final long[] jjtoSkip = {
   0x17c3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x17c00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x483c0L, 0x0L, 
};
static private ASCII_UCodeESC_CharStream input_stream;
static private final int[] jjrounds = new int[60];
static private final int[] jjstateSet = new int[120];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected int curChar;
public OscriptParserTokenManager(ASCII_UCodeESC_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public OscriptParserTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_UCodeESC_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? ASCII_UCodeESC_CharStream.GetImage() : im;
   t.beginLine = ASCII_UCodeESC_CharStream.getBeginLine();
   t.beginColumn = ASCII_UCodeESC_CharStream.getBeginColumn();
   t.endLine = ASCII_UCodeESC_CharStream.getEndLine();
   t.endColumn = ASCII_UCodeESC_CharStream.getEndColumn();
   t.beginOffset = ASCII_UCodeESC_CharStream.getBeginOffset();
   t.endOffset = ASCII_UCodeESC_CharStream.getEndOffset();
   
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   curChar = ASCII_UCodeESC_CharStream.BeginToken();
   if (curChar == -1)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         ASCII_UCodeESC_CharStream.backup(0);
         while (curChar != -1 && curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
            curChar = ASCII_UCodeESC_CharStream.BeginToken();
         if (curChar == -1)
            continue EOFLoop;
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           ASCII_UCodeESC_CharStream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        curChar = ASCII_UCodeESC_CharStream.readChar();
        if (curChar != -1)
           continue;
     }
     int error_line = ASCII_UCodeESC_CharStream.getEndLine();
     int error_column = ASCII_UCodeESC_CharStream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     int nextChar = ASCII_UCodeESC_CharStream.readChar();
     if (nextChar == -1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : ASCII_UCodeESC_CharStream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     } else {
        ASCII_UCodeESC_CharStream.backup(1);
        ASCII_UCodeESC_CharStream.backup(1);
        error_after = curPos <= 1 ? "" : ASCII_UCodeESC_CharStream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 11 :
         if (image == null)
            image = new StringBuffer(new String(ASCII_UCodeESC_CharStream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(ASCII_UCodeESC_CharStream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         stillInFormalComment = image.toString().endsWith("@");
         break;
      default :
         break;
   }
}
static final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
              image = new StringBuffer(new String(ASCII_UCodeESC_CharStream.GetSuffix(jjimageLen)));
         else
            image.append(ASCII_UCodeESC_CharStream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         ASCII_UCodeESC_CharStream.backup(1);
         break;
      case 15 :
         if (image == null)
              image = new StringBuffer(new String(ASCII_UCodeESC_CharStream.GetSuffix(jjimageLen)));
         else
            image.append(ASCII_UCodeESC_CharStream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         ASCII_UCodeESC_CharStream.backup(1);
         if ( stillInFormalComment )
            SwitchTo(IN_FORMAL_COMMENT);
         else
            SwitchTo(DEFAULT);
         break;
      default : 
         break;
   }
}
}
