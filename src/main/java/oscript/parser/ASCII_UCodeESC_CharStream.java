/* Generated By:JavaCC: Do not edit this line. ASCII_UCodeESC_CharStream.java Version 0.7pre6 */
package oscript.parser;

import java.util.List;
import java.util.Stack;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (with java-like unicode escape processing).
 */
public final class ASCII_UCodeESC_CharStream {
    public static List<String> _lines;

    private static String _readLine() {
        if (_lines == null)
            return null;
                
         if (_lines.isEmpty()) {
            _lines = null;
            return null;
        }
        return _lines.removeFirst();
    }

    private static final int MASK = 0xFFFF;
    public static final boolean staticFlag = true;

    static final int hexval(char c)  {
        switch (c) {
        case '0':
            return 0;
        case '1':
            return 1;
        case '2':
            return 2;
        case '3':
            return 3;
        case '4':
            return 4;
        case '5':
            return 5;
        case '6':
            return 6;
        case '7':
            return 7;
        case '8':
            return 8;
        case '9':
            return 9;

        case 'a':
        case 'A':
            return 10;
        case 'b':
        case 'B':
            return 11;
        case 'c':
        case 'C':
            return 12;
        case 'd':
        case 'D':
            return 13;
        case 'e':
        case 'E':
            return 14;
        case 'f':
        case 'F':
            return 15;
        }
        return -1;
    }

    static public int bufpos = -1;
    static int bufsize;
    static int available;
    static int tokenBegin;
    static private int bufline[];
    static private int bufcolumn[];
    static private int bufoff[];

    static private int off = 0;
    static private int column = 0;
    static private int line = 1;

    static private boolean prevCharIsCR = false;
    static private boolean prevCharIsLF = false;

    static private char[] nextCharBuf;
    static private char[] buffer;
    static private int maxNextCharInd = 0;
    static private int nextCharInd = -1;
    static private int inBuf = 0;
    static final String CDATA_LEFT = "<![CDATA[";
    static final String CDATA_RIGHT = "]]>";
    static Stack<String> cdataStack = new Stack<String>();

    static private final void ExpandBuff(boolean wrapAround) {
        char[] newbuffer = new char[bufsize + 2048];
        int newbufline[] = new int[bufsize + 2048];
        int newbufcolumn[] = new int[bufsize + 2048];
        int newbufoff[] = new int[bufsize + 2048];

        try {
            if (wrapAround) {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                buffer = newbuffer;

                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;

                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;

                System.arraycopy(bufoff, tokenBegin, newbufoff, 0, bufsize - tokenBegin);
                System.arraycopy(bufoff, 0, newbufoff, bufsize - tokenBegin, bufpos);
                bufoff = newbufoff;

                bufpos += (bufsize - tokenBegin);
            } else {
                if (bufsize - tokenBegin > 0)
                    System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                buffer = newbuffer;

                if (bufsize - tokenBegin > 0)
                    System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                bufline = newbufline;

                if (bufsize - tokenBegin > 0)
                    System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                bufcolumn = newbufcolumn;

                if (bufsize - tokenBegin > 0)
                    System.arraycopy(bufoff, tokenBegin, newbufoff, 0, bufsize - tokenBegin);
                bufoff = newbufoff;

                bufpos -= tokenBegin;
            }
        } catch (Throwable t) {
            throw new Error(t.getMessage());
        }

        available = (bufsize += 2048);
        tokenBegin = 0;
  }

  static private final boolean FillBuff() 
  {  
	 if (_lines == null)
        return false;
	 String line;
	 StringBuffer buf = new StringBuffer();
	 while( (line = _readLine()) != null ) {
	     buf.append(line);
		 buf.append("\n");
		 if (buf.length() >= 16384)
			 break;
	 }
	 if (nextCharBuf == null || buf.length() > nextCharBuf.length) 
		 nextCharBuf = new char[buf.length()];
	 buf.getChars(0, buf.length(), nextCharBuf, 0);
     maxNextCharInd = buf.length();
     nextCharInd = 0;    
     return true;
   
  }

    static private final int ReadByte() {
        if (++nextCharInd >= maxNextCharInd)
            if (!FillBuff())
                return -1;
        return nextCharBuf[nextCharInd];
    }

    static public int BeginToken()  {
        if (inBuf > 0) {
            --inBuf;
            return buffer[tokenBegin = (bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos];
        }

        tokenBegin = 0;
        bufpos = -1;

        return readChar();
    }

    static private final void AdjustBuffSize() {
        if (available == bufsize) {
            if (tokenBegin > 2048) {
                bufpos = 0;
                available = tokenBegin;
            } else
                ExpandBuff(false);
        } else if (available > tokenBegin)
            available = bufsize;
        else if ((tokenBegin - available) < 2048)
            ExpandBuff(true);
        else
            available = tokenBegin;
    }

    static private final void UpdateLineColumn(char c) {
        column++;

        if (prevCharIsLF) {
            prevCharIsLF = false;
            line += (column = 1);
        } else if (prevCharIsCR) {
            prevCharIsCR = false;
            if (c == '\n') {
                prevCharIsLF = true;
            } else
                line += (column = 1);
        }

        switch (c) {
        case '\r':
            prevCharIsCR = true;
            break;
        case '\n':
            prevCharIsLF = true;
            break;
        case '\t':
            column--;
            column += (8 - (column & 07));
            break;
        default:
            break;
        }

        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
        bufoff[bufpos] = off++;
    }

    // char OR -1 > END
    static public final int readChar() {
        if (inBuf > 0) {
            --inBuf;
            return buffer[(bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos];
        }

        char c;

        if (++bufpos == available)
            AdjustBuffSize();

        int rb = ReadByte();
        if (rb == -1)
            return -1;
        char nc = (buffer[bufpos] = c = (char) ((char) MASK & (char) rb));
        if ((nc == '\\')) {
            UpdateLineColumn(c);

            int backSlashCnt = 1;

            for (;;) // Read all the backslashes
            {
                if (++bufpos == available)
                    AdjustBuffSize();

                rb = ReadByte();
                if (rb == -1) {
                    if (backSlashCnt > 1)
                        backup(backSlashCnt);

                    return '\\';
                }
                if ((buffer[bufpos] = c = (char) ((char) MASK & (char) rb)) != '\\') {
                    UpdateLineColumn(c);
                    // found a non-backslash char.
                    if ((c == 'u') && ((backSlashCnt & 1) == 1)) {
                        if (--bufpos < 0)
                            bufpos = bufsize - 1;

                        break;
                    }

                    backup(backSlashCnt);
                    return '\\';
                }

                UpdateLineColumn(c);
                backSlashCnt++;
            }

            // do we need to update offset here?
            while (true) {
                rb = ReadByte();
                if (rb == -1) 
                    return -1;
                if ((c = (char) ((char) MASK & (char)rb)) == 'u') 
                    ++column;
                else
                    break;
            }
            int rb1 = ReadByte();
            if (rb1 == -1)
                return -1;
            int rb2 = ReadByte();
            if (rb2 == -1)
                return -1;
            buffer[bufpos] = c = (char) (
                hexval(c) << 12 | 
                hexval((char) ((char) MASK & (char)rb)) << 8 | 
                hexval((char) ((char) MASK & (char)rb1)) << 4 | 
                hexval((char) ((char) MASK & (char)rb2))
            );

            column += 4;
            if (backSlashCnt == 1)
                return c;
            else {
                backup(backSlashCnt - 1);
                return '\\';
            }
        } else {
            UpdateLineColumn(c);
            return (c);
        }
    }

    /**
     * @deprecated
     * @see #getEndColumn
     */

    static public final int getColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * @deprecated
     * @see #getEndLine
     */

    static public final int getLine() {
        return bufline[bufpos];
    }

    static public final int getEndColumn() {
        return bufcolumn[bufpos];
    }

    static public final int getEndLine() {
        return bufline[bufpos];
    }

    static public final int getBeginColumn() {
        return bufcolumn[tokenBegin];
    }

    static public final int getBeginLine() {
        return bufline[tokenBegin];
    }

    static public final int getBeginOffset() {
        return bufoff[tokenBegin];
    }

    static public final int getEndOffset() {
        return bufoff[bufpos];
    }

    static public final void backup(int amount) {

        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    static public final String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
    }

    static public final char[] GetSuffix(int len) {
        char[] ret = new char[len];

        if ((bufpos + 1) >= len)
            System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
            System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }

        return ret;
    }

    static public void Done() {
        nextCharBuf = null;
        buffer = null;
        bufline = null;
        bufcolumn = null;
        bufoff = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.<BR>
     */
    static public void adjustBeginLineColumn(int newLine, int newCol) {
        int start = tokenBegin;
        int len;

        if (bufpos >= tokenBegin) {
            len = bufpos - tokenBegin + inBuf + 1;
        } else {
            len = bufsize - tokenBegin + bufpos + 1 + inBuf;
        }

        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;

        while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
            bufline[j] = newLine;
            nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
            bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }

        if (i < len) {
            bufline[j] = newLine++;
            bufcolumn[j] = newCol + columnDiff;

            while (i++ < len) {
                if (bufline[j = start % bufsize] != bufline[++start % bufsize])
                    bufline[j] = newLine++;
                else
                    bufline[j] = newLine;
            }
        }

        line = bufline[j];
        column = bufcolumn[j];
        off = bufoff[j];
    }
}
